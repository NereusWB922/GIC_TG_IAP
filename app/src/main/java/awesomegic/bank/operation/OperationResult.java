package awesomegic.bank.operation;

import static awesomegic.bank.utils.CollectionUtil.requireAllNonNull;

import awesomegic.bank.model.account.BankAccount;

/**
 * Represents the result of an operation.
 */
public class OperationResult {
    public final String feedback;
    public final boolean exit;
    public final BankAccount updatedAccount;

    /**
     * Constructs a new OperationResult with the specified updated account, feedback message, and exit flag.
     *
     * @param updatedAccount The updated bank account resulting from the operation.
     * @param feedback The feedback message generated by the operation.
     * @param exit {@code true} if the application should exitn, {@code false} otherwise.
     */
    OperationResult(BankAccount updatedAccount, String feedback, boolean exit) {
        requireAllNonNull(updatedAccount, feedback);

        this.updatedAccount = updatedAccount;
        this.feedback = feedback;
        this.exit = exit;
    }

    /**
     * Constructs a new OperationResult with the specified updated account and feedback message.
     * The exit flag is set to false by default.
     *
     * @param updatedAccount The updated bank account resulting from the operation.
     * @param feedback The feedback message generated by the operation.
     */
    OperationResult(BankAccount updatedAccount, String feedback) {
        this(updatedAccount, feedback, false);
    }

    /**
     * Constructs a new OperationResult with the specified updated account and exit flag.
     * The feedback message is set to an empty string by default.
     *
     * @param updatedAccount The updated bank account resulting from the operation.
     * @param exit {@code true} if the application should exit, {@code false} otherwise.
     */
    OperationResult(BankAccount updatedAccount, boolean exit) {
        this(updatedAccount, "", exit);
    }
}
